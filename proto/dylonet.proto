// Copyright 2021 bmc::labs GmbH.
//
// Authors:
//   Florian Eich <florian@bmc-labs.com>

syntax = "proto3";

package dylonet;


service DylonetService {
  // An RPC to ask Dylonet for its state.
  //
  // Does not mutate Dylonet, only returns the state, a message and a counter
  // for the accesses Dylonet has processed..
  rpc State(Empty) returns (StateResponse) {}

  // An RPC to deliver a data point to Dylonet.
  //
  // In this implementation, data points are sourced from the marine Automatic
  // Identification System (AIS). For other uses, one may choose to implement a
  // more generic data point to replace this implementation.
  rpc Deliver(DataPoint) returns (StateResponse) {}

  // An RPC to acquire a result from Dylonet.
  //
  // Once a result is available, it must be collected from Dylonet to be
  // further used in application code. This call achieves this.
  rpc Acquire(Empty) returns (AggregateResult) {}
}

// Placeholder message for calls which don't require an argument.
message Empty {}

// Defines the states Dylonet can be in.
enum State {
  INACTIVE = 0;
  READY = 1;
  RESULTS = 2;  // indicates the availability of results
}

// Dylonet is capable of a limited number of states. Each can additionally
// carry a message (text form) to provide information to the caller. Lastly, an
// access counter indicates how many requests have been processed.
message StateResponse {
  State state = 1;
  string msg = 2;
  uint64 accessed = 3;
}

// The data in this case is sourced from the marine Automatic Identification
// System (AIS). Other uses require a different implementation.
message DataPoint {
  int64 id = 1;
  int32 mmsi = 2;
  int32 status = 3;
  double turn = 4;
  double speed = 5;
  double course = 6;
  int32 heading = 7;
  double lon = 8;
  double lat = 9;
  int64 ts = 10;
}

// TO DO
message AggregateResult {
  // TO DO
}

